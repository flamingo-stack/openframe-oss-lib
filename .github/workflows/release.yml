name: OpenFrame OSS Libs Release

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release OSS Libs (x.y.z)'
        required: true
        type: string
  repository_dispatch:
    types: [trigger-build]

env:
  REGISTRY: "com.openframe.oss"
  ARTIFACT_REGISTRY: "com/openframe/oss"
  ORGANISATION: ${{ github.repository_owner }}
  REPOSITORY: ${{ github.event.repository.name }}
  
jobs:
  release:
    name: Build & Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Get Old Version
        env:
          MAVEN_REGISTRY: maven.pkg.github.com
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          URL="https://$MAVEN_REGISTRY/${{ env.ORGANISATION }}/${{ env.REPOSITORY }}/${{ env.ARTIFACT_REGISTRY }}/${{ env.REPOSITORY }}/maven-metadata.xml"
          OLD_VERSION=$(curl -sf -H "Authorization: token $GITHUB_TOKEN" "$URL" | \
                        grep -oP '<version>\K[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?' | sort -V | tail -1)
          OLD_VERSION=${OLD_VERSION:-0.0.0}
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
          echo "Found old version: $OLD_VERSION"
      
      - name: Set Auto Version
        if: github.event_name == 'push'
        run: |
          # Check if version has rc suffix
          if [[ "${{ env.OLD_VERSION }}" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-rc([0-9]+)$ ]]; then
            RC="${BASH_REMATCH[2]}"
            NEW_VERSION="${BASH_REMATCH[1]}-rc$((RC + 1))"
          else
            NEW_VERSION="${{ env.OLD_VERSION }}-rc1"
          fi
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "${{ env.OLD_VERSION }} → $NEW_VERSION"
      
      - name: Set Manual Version
        if: github.event_name == 'workflow_dispatch'
        env:
          NEW_VERSION: ${{ github.event.inputs.version }}
        run: |
          OLD_BASE="${{ env.OLD_VERSION }}"
          [[ "$OLD_BASE" =~ ^([0-9]+\.[0-9]+\.[0-9]+) ]] && OLD_BASE="${BASH_REMATCH[1]}"

          IFS='.' read -r old_major old_minor old_patch <<< "$OLD_BASE"
          IFS='.' read -r new_major new_minor new_patch <<< "$NEW_VERSION"

          # Validate version bump rules in one expression
          if ! ([ "$new_major" -eq $((old_major + 1)) ] && [ "$new_minor" -eq 0 ] && [ "$new_patch" -eq 0 ]) &&
             ! ([ "$new_major" -eq "$old_major" ] && [ "$new_minor" -eq $((old_minor + 1)) ] && [ "$new_patch" -eq 0 ]) &&
             ! ([ "$new_major" -eq "$old_major" ] && [ "$new_minor" -eq "$old_minor" ] && [ "$new_patch" -eq $((old_patch + 1)) ]); then
            echo "Invalid version bump: ${{ env.OLD_VERSION }} → $NEW_VERSION"
            exit 1
          fi
          echo "New version validated: ${{ env.OLD_VERSION }} → $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      
      - name: Build
        run: |
          mvn clean install \
            -am \
            -Dcompress \
            --threads 2C \
            --batch-mode \
            --no-transfer-progress \
            -Dmaven.javadoc.skip=true
      
      - name: Deploy ${{ env.NEW_VERSION }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mvn versions:set -DnewVersion="${{ env.NEW_VERSION }}" -DgenerateBackupPoms=false
          mvn deploy -DskipTests -s .mvn/settings.xml

      - name: Clean RC versions
        if: github.event_name == 'workflow_dispatch'
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          (echo "${{ env.REPOSITORY }}"; grep -oP '(?<=<module>)[^<]+' pom.xml) | while read MODULE; do
            PKG="${{ env.REGISTRY }}.${MODULE//\./%2E}"
            echo "Cleaning $PKG..."
            gh api "/orgs/${{ env.ORGANISATION }}/packages/maven/$PKG/versions" --paginate \
              --jq '.[] | select(.name | test("-rc[0-9]+$")) | .id' 2>/dev/null | \
              xargs -r -I {} gh api -X DELETE "/orgs/${{ env.ORGANISATION }}/packages/maven/$PKG/versions/{}" 2>/dev/null || true
          done
