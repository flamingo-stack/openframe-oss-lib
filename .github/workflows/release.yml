# when the lib is updtaed it will trigger the tenant with the patched version
# which will update the pom.xml on root and auto commit to main
# will rebuild the docker images multistages

name: OpenFrame OSS Libs Release

permissions:
  contents: read
  packages: write
  actions: write
  pull-requests: write
  attestations: write
  id-token: write

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release OSS Libs (x.y.z)'
        required: true
        type: string

env:
  REGISTRY: "com.openframe.oss"
  ARTIFACT_REGISTRY: "com/openframe/oss"
  ORGANISATION: ${{ github.repository_owner }}
  REPOSITORY: ${{ github.event.repository.name }}
  
jobs:
  release:
    name: Build & Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.auto-version.outputs.version || steps.manual-version.outputs.version }}
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Get Previous Version
        env:
          MAVEN_REGISTRY: maven.pkg.github.com
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          URL="https://$MAVEN_REGISTRY/${{ env.ORGANISATION }}/${{ env.REPOSITORY }}/${{ env.ARTIFACT_REGISTRY }}/${{ env.REPOSITORY }}/maven-metadata.xml"
          OLD_VERSION=$(curl -sf -H "Authorization: token $GITHUB_TOKEN" "$URL" | \
                        grep -oP '<version>\K[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -1)
          OLD_VERSION=${OLD_VERSION:-0.0.0}
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
          echo "Found old version: $OLD_VERSION"
      
      - name: Set Snapshot Version
        id: snapshot-version
        if: github.event_name == 'push'
        run: |
          echo "NEW_VERSION=${{ env.OLD_VERSION }}-SNAPSHOT" >> $GITHUB_ENV
          echo "${{ env.OLD_VERSION }} → ${{ env.OLD_VERSION }}-SNAPSHOT"
      
      - name: Set Release Version
        id: release-version
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call'
        env:
          NEW_VERSION: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || inputs.version }}
        run: |
          OLD_BASE="${{ env.OLD_VERSION }}"
          [[ "$OLD_BASE" =~ ^([0-9]+\.[0-9]+\.[0-9]+) ]] && OLD_BASE="${BASH_REMATCH[1]}"

          IFS='.' read -r old_major old_minor old_patch <<< "$OLD_BASE"
          IFS='.' read -r new_major new_minor new_patch <<< "$NEW_VERSION"

          # Validate version bump rules in one expression
          if ! ([ "$new_major" -eq $((old_major + 1)) ] && [ "$new_minor" -eq 0 ] && [ "$new_patch" -eq 0 ]) &&
             ! ([ "$new_major" -eq "$old_major" ] && [ "$new_minor" -eq $((old_minor + 1)) ] && [ "$new_patch" -eq 0 ]) &&
             ! ([ "$new_major" -eq "$old_major" ] && [ "$new_minor" -eq "$old_minor" ] && [ "$new_patch" -eq $((old_patch + 1)) ]); then
            echo "Invalid version bump: ${{ env.OLD_VERSION }} → $NEW_VERSION"
            exit 1
          fi
          echo "New version validated: ${{ env.OLD_VERSION }} → $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=${{ env.NEW_VERSION }}" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          mvn clean install \
            -am \
            -Dcompress \
            --threads 2C \
            --batch-mode \
            --no-transfer-progress \
            -Dmaven.javadoc.skip=true
      
      - name: Deploy ${{ env.NEW_VERSION }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mvn versions:set -DnewVersion="${{ env.NEW_VERSION }}" -DgenerateBackupPoms=false
          mvn deploy -DskipTests -s .mvn/settings.xml

      - name: Clean SNAPSHOT versions
        if: github.event_name == 'workflow_dispatch'
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          (echo "${{ env.REPOSITORY }}"; grep -oP '(?<=<module>)[^<]+' pom.xml) | while read MODULE; do
            PKG="${{ env.REGISTRY }}.${MODULE//\./%2E}"
            echo "Cleaning $PKG..."
            gh api "/orgs/${{ env.ORGANISATION }}/packages/maven/$PKG/versions" --paginate \
              --jq '[.[] | select(.name | test("SNAPSHOT"))] | sort_by(.created_at) | reverse | .[3:] | .[].id' |
              xargs -r -n1 -I{} gh api -X DELETE "/orgs/${{ env.ORGANISATION }}/packages/maven/$PKG/versions/{}"
          done

  update-version:
    name: Update lib version in pmm.xml
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call') || 
      (github.event_name == 'push' && contains(needs.changes.outputs[matrix.name], 'true'))
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Update pom.xml versions
        run: |
          VERSION="${{ inputs.version }}"
          echo "Updating to version: $VERSION"

          # Find and update all openframe-oss-lib dependency versions
          find . -name "pom.xml" -type f -exec sed -i \
            "s|<groupId>com\.openframe\.oss</groupId>\s*<artifactId>openframe-[^<]*</artifactId>\s*<version>[0-9\.]*\(-rc[0-9]*\)\?</version>|<groupId>com.openframe.oss</groupId><artifactId>\1</artifactId><version>$VERSION</version>|g" {} \;

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add pom.xml
          git commit -m "chore: bump openframe-oss-lib to ${{ inputs.version }}" || echo "No changes to commit"
          git push || echo "Nothing to push"

  trigger-build:
    name: Trigger Tenant Build
    needs: release
    if: github.event_name == 'workflow_dispatch'
    uses: flamingo-stack/openframe-oss-tenant/.github/workflows/build.yml@ami/ci
    secrets: inherit
    with:
      version: ${{ needs.release.outputs.version }}
