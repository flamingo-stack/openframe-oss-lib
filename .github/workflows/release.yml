name: OpenFrame OSS Libs Release

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [feature/ci_release]
  # workflow_dispatch:
  #   inputs:
  #     version:
  #       description: 'Version to release (e.g., x.y.z)'
  #       required: true
  #       type: string

jobs:
  release:
    name: Build & Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' 
    # || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Get Next Patch Version
        id: auto-version
        if: github.event_name == 'push'
        run: |
          # Fetch latest version from registry
          URL="https://maven.pkg.github.com/flamingo-stack/openframe-oss-lib"
          METADATA=$(curl -sf -H "Authorization: token ${{ github.token }}" \
            "$URL/com/openframe/oss/openframe-data-mongo/maven-metadata.xml" 2>/dev/null || echo "")
          
          # Extract latest version or use default
          if [ -n "$METADATA" ]; then
            LATEST=$(echo "$METADATA" | grep -oP '<version>\K[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -1)
          fi
          LATEST=${LATEST:-1.0.0}
          
          # Increment patch version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST"
          NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "ðŸ“¦ Auto Version: $LATEST (previous: $LATEST)"
      

      # - name: Set Manual Version
      #   if: github.event_name == 'workflow_dispatch'
      #   run: |
      #     echo "NEW_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
      #     echo "ðŸ“¦ Manual Version: ${{ github.event.inputs.version }}"
      
      - name: Build & Test
        run: mvn clean install -am -Dcompress --batch-mode
      
      - name: Deploy ${{ env.LATEST }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mvn versions:set -DnewVersion="${{ env.LATEST }}" -DgenerateBackupPoms=false
          mvn deploy -DskipTests -s .mvn/settings.xml
      
      - name: Deploy Latest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mvn versions:set -DnewVersion="latest" -DgenerateBackupPoms=false
          mvn deploy -DskipTests -s .mvn/settings.xml
