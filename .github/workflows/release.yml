# name: Release

# on:
#   # Manual trigger with version input
#   workflow_dispatch:
#     inputs:
#       version:
#         description: 'Release version (e.g., 1.0.0, 2.1.0-RC1)'
#         required: true
#         type: string
#       deploy_to_maven:
#         description: 'Deploy to GitHub Packages Maven Registry'
#         required: true
#         default: true
#         type: boolean
#       create_github_release:
#         description: 'Create GitHub Release (optional, without tag)'
#         required: true
#         default: false
#         type: boolean
  
#   # Automatic trigger on PR to feature/ci_release branch
#   pull_request:
#     types: [opened, synchronize, reopened, ready_for_review]
#     branches: [feature/ci_release]

# jobs:
#   # Determine if this is a PR or manual trigger
#   determine-version:
#     runs-on: ubuntu-latest
#     outputs:
#       version: ${{ steps.version.outputs.version }}
#       is_pr: ${{ steps.version.outputs.is_pr }}
#     steps:
#       - name: Set version
#         id: version
#         run: |
#           if [ "${{ github.event_name }}" == "pull_request" ]; then
#             # Generate PR-based version
#             PR_NUMBER="${{ github.event.pull_request.number }}"
#             SHORT_SHA=$(echo "${{ github.event.pull_request.head.sha }}" | cut -c1-7)
#             VERSION="1.0.0-PR${PR_NUMBER}-${SHORT_SHA}-SNAPSHOT"
#             echo "version=$VERSION" >> $GITHUB_OUTPUT
#             echo "is_pr=true" >> $GITHUB_OUTPUT
#             echo "Generated PR version: $VERSION"
#           else
#             # Use manual input version
#             VERSION="${{ github.event.inputs.version }}"
#             echo "version=$VERSION" >> $GITHUB_OUTPUT
#             echo "is_pr=false" >> $GITHUB_OUTPUT
#             echo "Using manual version: $VERSION"
#           fi

#   validate:
#     needs: determine-version
#     runs-on: ubuntu-latest
#     if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && !github.event.pull_request.draft)
#     outputs:
#       proceed: ${{ steps.check.outputs.proceed }}
#     steps:
#       - name: Validate version format
#         id: check
#         run: |
#           VERSION="${{ needs.determine-version.outputs.version }}"
          
#           # For PR versions, always proceed
#           if [ "${{ needs.determine-version.outputs.is_pr }}" == "true" ]; then
#             echo "PR version detected, proceeding..."
#             echo "proceed=true" >> $GITHUB_OUTPUT
#             exit 0
#           fi
          
#           # Validate manual version format
#           if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9\-\.]+)?$'; then
#             echo "Error: Invalid version format. Please use semantic versioning (e.g., 1.0.0, 1.0.0-RC1)"
#             exit 1
#           fi
          
#           echo "Version validation passed: $VERSION"
#           echo "proceed=true" >> $GITHUB_OUTPUT

#   build-test-deploy:
#     needs: [determine-version, validate]
#     if: needs.validate.outputs.proceed == 'true'
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#       packages: write
#       pull-requests: write
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
      
#       - name: Set up JDK 21
#         uses: actions/setup-java@v4
#         with:
#           java-version: '21'
#           distribution: 'temurin'
#           cache: maven
#           server-id: github
#           settings-path: ${{ github.workspace }}
      
#       - name: Set Maven version
#         run: |
#           VERSION="${{ needs.determine-version.outputs.version }}"
#           echo "Setting version to $VERSION"
#           mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false
          
#           echo "### Version Information" >> $GITHUB_STEP_SUMMARY
#           echo "Setting all modules to version: **$VERSION**" >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
      
#       - name: Build project
#         run: |
#           echo "Building all modules..."
#           mvn -B clean compile --file pom.xml
      
#       - name: Run tests
#         run: |
#           echo "Running tests..."
#           mvn -B test --file pom.xml || true
      
#       - name: Package artifacts
#         run: |
#           echo "Packaging artifacts..."
#           mvn -B package --file pom.xml
      
#       - name: Deploy to GitHub Packages
#         if: |
#           (github.event_name == 'pull_request') || 
#           (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_maven == 'true')
#         run: |
#           echo "Deploying to GitHub Packages Maven Registry..."
#           mvn -B deploy -DskipTests -s $GITHUB_WORKSPACE/settings.xml
          
#           VERSION="${{ needs.determine-version.outputs.version }}"
          
#           echo "### Deployment Successful ✅" >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "Successfully deployed version **$VERSION** to GitHub Packages" >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "#### Published Artifacts:" >> $GITHUB_STEP_SUMMARY
#           echo "- \`com.openframe.oss:openframe-oss-lib:$VERSION\`" >> $GITHUB_STEP_SUMMARY
#           echo "- \`com.openframe.oss:openframe-data-mongo:$VERSION\`" >> $GITHUB_STEP_SUMMARY
#           echo "- \`com.openframe.oss:openframe-test-lib:$VERSION\`" >> $GITHUB_STEP_SUMMARY
#         env:
#           GITHUB_TOKEN: ${{ github.token }}
      
#       - name: Comment on PR
#         if: github.event_name == 'pull_request'
#         uses: actions/github-script@v7
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const version = '${{ needs.determine-version.outputs.version }}';
#             const comment = `### 📦 Maven Package Published
            
#             ✅ Successfully published version \`${version}\` to GitHub Packages Maven Registry.
            
#             #### Published Artifacts:
#             - \`com.openframe.oss:openframe-oss-lib:${version}\`
#             - \`com.openframe.oss:openframe-data-mongo:${version}\`
#             - \`com.openframe.oss:openframe-test-lib:${version}\`
            
#             #### Usage:
#             \`\`\`xml
#             <dependency>
#                 <groupId>com.openframe.oss</groupId>
#                 <artifactId>openframe-test-lib</artifactId>
#                 <version>${version}</version>
#             </dependency>
#             \`\`\`
            
#             **Note:** This is a SNAPSHOT version for PR testing.`;
            
#             const { data: comments } = await github.rest.issues.listComments({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               issue_number: context.issue.number
#             });
            
#             const botComment = comments.find(comment => 
#               comment.user.type === 'Bot' && 
#               comment.body.includes('Maven Package Published')
#             );
            
#             if (botComment) {
#               await github.rest.issues.updateComment({
#                 owner: context.repo.owner,
#                 repo: context.repo.repo,
#                 comment_id: botComment.id,
#                 body: comment
#               });
#             } else {
#               await github.rest.issues.createComment({
#                 owner: context.repo.owner,
#                 repo: context.repo.repo,
#                 issue_number: context.issue.number,
#                 body: comment
#               });
#             }
      
#       - name: Upload build artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: maven-artifacts-${{ needs.determine-version.outputs.version }}
#           path: |
#             **/target/*.jar
#           retention-days: 30

#   create-optional-release:
#     needs: [determine-version, build-test-deploy]
#     if: |
#       github.event_name == 'workflow_dispatch' && 
#       github.event.inputs.create_github_release == 'true'
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#     steps:
#       - uses: actions/checkout@v4
      
#       - name: Download build artifacts
#         uses: actions/download-artifact@v3
#         with:
#           name: maven-artifacts-${{ needs.determine-version.outputs.version }}
#           path: ./artifacts
      
#       - name: Create Release Notes
#         run: |
#           VERSION="${{ needs.determine-version.outputs.version }}"
          
#           cat << EOF > release-notes.md
#           ## Release v$VERSION
          
#           This release has been published to GitHub Packages Maven Registry.
          
#           ### Maven Coordinates
          
#           Add to your \`pom.xml\`:
          
#           \`\`\`xml
#           <dependency>
#               <groupId>com.openframe.oss</groupId>
#               <artifactId>openframe-test-lib</artifactId>
#               <version>$VERSION</version>
#           </dependency>
#           \`\`\`
#           EOF
      
#       - name: Create GitHub Release
#         uses: softprops/action-gh-release@v1
#         with:
#           tag_name: v${{ needs.determine-version.outputs.version }}
#           name: Release v${{ needs.determine-version.outputs.version }}
#           body_path: release-notes.md
#           draft: false
#           prerelease: false
#           files: |
#             artifacts/**/*.jar
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   summary:
#     needs: [determine-version, build-test-deploy, create-optional-release]
#     if: always()
#     runs-on: ubuntu-latest
#     steps:
#       - name: Final Summary
#         run: |
#           VERSION="${{ needs.determine-version.outputs.version }}"
          
#           if [ "${{ github.event_name }}" == "pull_request" ]; then
#             echo "# 🔄 PR Auto-Release Summary" >> $GITHUB_STEP_SUMMARY
#             echo "" >> $GITHUB_STEP_SUMMARY
#             echo "**PR #${{ github.event.pull_request.number }}** to \`feature/ci_release\`" >> $GITHUB_STEP_SUMMARY
#           else
#             echo "# 📦 Manual Release Summary" >> $GITHUB_STEP_SUMMARY
#           fi
          
#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "## Version: $VERSION" >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
          
#           if [ "${{ needs.build-test-deploy.result }}" == "success" ]; then
#             echo "### ✅ Build and Deployment: **Successful**" >> $GITHUB_STEP_SUMMARY
#             echo "- Maven artifacts published to GitHub Packages" >> $GITHUB_STEP_SUMMARY
#           else
#             echo "### ❌ Build and Deployment: **Failed**" >> $GITHUB_STEP_SUMMARY
#           fi
          
#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "---" >> $GITHUB_STEP_SUMMARY
#           echo "**Triggered by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
#           echo "**Workflow run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY