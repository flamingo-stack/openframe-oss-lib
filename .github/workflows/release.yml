name: OpenFrame OSS Libs Release

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release OSS Libs (x.y.z)'
        required: true
        type: string

jobs:
  release:
    name: Build & Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Get Old Version
        env:
          MAVEN_REGISTRY: maven.pkg.github.com
          REPOSITORY: ${{ github.repository }}
          OSS_LIB_ARTIFACT: com/openframe/oss/openframe-oss-lib
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          URL="https://$MAVEN_REGISTRY/$REPOSITORY/$OSS_LIB_ARTIFACT/maven-metadata.xml"
          OLD_VERSION=$(curl -sf -H "Authorization: token $GITHUB_TOKEN" "$URL" | \
                        grep -oP '<version>\K[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -1)
          OLD_VERSION=${OLD_VERSION:-1.0.0}
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_ENV
          echo "Found old version: $OLD_VERSION"
      
      - name: Set Auto Version
        if: github.event_name == 'push'
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.OLD_VERSION }}"
          NEW_VERSION="$major.$minor.$((patch + 1))"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "${{ env.OLD_VERSION }} → $NEW_VERSION"
      
      - name: Set Manual Version
        if: github.event_name == 'workflow_dispatch'
        env:
          NEW_VERSION: ${{ github.event.inputs.version }}
        run: |
          IFS='.' read -r old_major old_minor old_patch <<< "${{ env.OLD_VERSION }}"
          IFS='.' read -r new_major new_minor new_patch <<< "$NEW_VERSION"

          if [ "$new_major" != "$old_major" ]; then
            # Major bump: must be +1, minor/patch must be 0
            [ "$new_major" -eq $((old_major + 1)) ] && [ "$new_minor" -eq 0 ] && [ "$new_patch" -eq 0 ] || exit 1
          elif [ "$new_minor" != "$old_minor" ]; then
            # Minor bump: must be +1, patch must be 0
            [ "$new_minor" -eq $((old_minor + 1)) ] && [ "$new_patch" -eq 0 ] || exit 1
          else
            # Patch bump: must be greater
            [ "$new_patch" -eq $((old_patch + 1)) ] || exit 1
          fi
          echo "New version validated: ${{ env.OLD_VERSION }} → $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      
      - name: Build
        run: mvn clean install -am -Dcompress --batch-mode
      
      - name: Deploy ${{ env.NEW_VERSION }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mvn versions:set -DnewVersion="${{ env.NEW_VERSION }}" -DgenerateBackupPoms=false
          mvn deploy -DskipTests -s .mvn/settings.xml
