extend type Query {
    events(filter: EventFilterInput, pagination: CursorPaginationInput, search: String): EventConnection!
    eventById(id: ID!): Event
    eventFilters(filter: EventFilterInput): EventFilters!
}

extend type Mutation {
    createEvent(input: CreateEventInput!): Event
    updateEvent(id: ID!, input: CreateEventInput!): Event
}

type Event {
    id: ID!
    userId: ID!
    timestamp: Instant!
    type: String!
    data: String
}

input EventFilterInput {
    userIds: [String!]
    eventTypes: [String!]
    startDate: Date
    endDate: Date
}

input CreateEventInput {
    userId: ID!
    type: String!
    data: String
}


type EventConnection {
    edges: [EventEdge!]!
    pageInfo: CursorPageInfo!
}

type EventEdge {
    node: Event!
    cursor: String!
}

type EventFilters {
    userIds: [String!]!
    eventTypes: [String!]!
} 