extend type Query {
    # Get all organizations with optional filtering
    organizations(filter: OrganizationFilterInput, search: String): OrganizationList!
    
    # Get single organization by ID
    organization(id: String!): Organization
    
    # Get organization by organizationId
    organizationByOrganizationId(organizationId: String!): Organization
}

type Organization {
    id: ID!
    name: String!
    organizationId: String!  # Generated as UUID on creation
    category: String
    numberOfEmployees: Int
    websiteUrl: String
    notes: String
    contactInformation: ContactInformation
    monthlyRevenue: Float
    contractStartDate: Date
    contractEndDate: Date
    createdAt: Instant
    updatedAt: Instant
    isDefault: Boolean!
    deleted: Boolean
    deletedAt: Instant
    
    # Logo for the organization
    image: OrganizationImage
}

type OrganizationImage {
    # URL to access the logo image
    imageUrl: String!
}

type ContactInformation {
    contacts: [ContactPerson!]!
    physicalAddress: Address
    mailingAddress: Address
    mailingAddressSameAsPhysical: Boolean
}

type ContactPerson {
    contactName: String
    title: String
    phone: String
    email: String
}

type Address {
    street1: String
    street2: String
    city: String
    state: String
    postalCode: String
    country: String
}

input OrganizationFilterInput {
    category: String
    minEmployees: Int
    maxEmployees: Int
    hasActiveContract: Boolean
}

type OrganizationList {
    organizations: [Organization!]!
}
